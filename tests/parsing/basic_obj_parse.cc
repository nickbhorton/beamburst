#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include "doctest.h"

#include "parser.h"

TEST_CASE("parsing happy case")
{
    std::stringstream ss;
    ss << "v -1.000 -1.000 -1.0000\n";
    ss << "vn -1.000 -1.000 -1.0000\n";
    ss << "vt -1.000 -1.000\n";
    ss << "f 10/20/30 11/21/31 12/22/32\n";
    auto const& [vertexes, normals, uvs, faces] = basic_obj_parse(ss);
    REQUIRE(vertexes.size() == 1);
    CHECK(vertexes[0][0] == -1.0);
    CHECK(vertexes[0][1] == -1.0);
    CHECK(vertexes[0][2] == -1.0);
    REQUIRE(normals.size() == 1);
    CHECK(normals[0][0] == -1.0);
    CHECK(normals[0][1] == -1.0);
    CHECK(normals[0][2] == -1.0);
    REQUIRE(uvs.size() == 1);
    CHECK(uvs[0][0] == -1.0);
    CHECK(uvs[0][1] == -1.0);
    REQUIRE(faces.size() == 1);
    REQUIRE(faces[0].size() == 3);
    auto const& [fv0, fvn0, fvt0] = faces[0][0];
    CHECK(fv0 == 10);
    REQUIRE(fvn0.has_value());
    CHECK(fvn0.value() == 20);
    REQUIRE(fvt0.has_value());
    CHECK(fvt0.value() == 30);
    auto const& [fv1, fvn1, fvt1] = faces[0][1];
    CHECK(fv1 == 11);
    REQUIRE(fvn1.has_value());
    CHECK(fvn1.value() == 21);
    REQUIRE(fvt1.has_value());
    CHECK(fvt1.value() == 31);
    auto const& [fv2, fvn2, fvt2] = faces[0][2];
    CHECK(fv2 == 12);
    REQUIRE(fvn2.has_value());
    CHECK(fvn2.value() == 22);
    REQUIRE(fvt2.has_value());
    CHECK(fvt2.value() == 32);
}

TEST_CASE("parsing a cube from blender")
{
    std::stringstream ss;
    ss << "# Blender 4.1.1\n";
    ss << "# www.blender.org\n";
    ss << "mtllib untitled.mtl\n";
    ss << "o Cube\n";
    ss << "v -1.000000 -1.000000 1.000000\n";
    ss << "v -1.000000 1.000000 1.000000\n";
    ss << "v -1.000000 -1.000000 -1.000000\n";
    ss << "v -1.000000 1.000000 -1.000000\n";
    ss << "v 1.000000 -1.000000 1.000000\n";
    ss << "v 1.000000 1.000000 1.000000\n";
    ss << "v 1.000000 -1.000000 -1.000000\n";
    ss << "v 1.000000 1.000000 -1.000000\n";
    ss << "vn -1.0000 -0.0000 -0.0000\n";
    ss << "vn -0.0000 -0.0000 -1.0000\n";
    ss << "vn 1.0000 -0.0000 -0.0000\n";
    ss << "vn -0.0000 -0.0000 1.0000\n";
    ss << "vn -0.0000 -1.0000 -0.0000\n";
    ss << "vn -0.0000 1.0000 -0.0000\n";
    ss << "vt 0.375000 0.000000\n";
    ss << "vt 0.625000 0.000000\n";
    ss << "vt 0.625000 0.250000\n";
    ss << "vt 0.375000 0.250000\n";
    ss << "vt 0.625000 0.500000\n";
    ss << "vt 0.375000 0.500000\n";
    ss << "vt 0.625000 0.750000\n";
    ss << "vt 0.375000 0.750000\n";
    ss << "vt 0.625000 1.000000\n";
    ss << "vt 0.375000 1.000000\n";
    ss << "vt 0.125000 0.500000\n";
    ss << "vt 0.125000 0.750000\n";
    ss << "vt 0.875000 0.500000\n";
    ss << "vt 0.875000 0.750000\n";
    ss << "s 0\n";
    ss << "f 1/1/1 2/2/1 4/3/1 3/4/1\n";
    ss << "f 3/4/2 4/3/2 8/5/2 7/6/2\n";
    ss << "f 7/6/3 8/5/3 6/7/3 5/8/3\n";
    ss << "f 5/8/4 6/7/4 2/9/4 1/10/4\n";
    ss << "f 3/11/5 7/6/5 5/8/5 1/12/5\n";
    ss << "f 8/5/6 4/13/6 2/14/6 6/7/6\n";

    auto const& [vertexes, normals, uvs, faces] = basic_obj_parse(ss);
    REQUIRE(vertexes.size() == 8);
    CHECK(vertexes[0][0] == -1.0);
    CHECK(vertexes[0][1] == -1.0);
    CHECK(vertexes[0][2] == 1.0);
    CHECK(vertexes[1][0] == -1.0);
    CHECK(vertexes[1][1] == 1.0);
    CHECK(vertexes[1][2] == 1.0);
    CHECK(vertexes[2][0] == -1.0);
    CHECK(vertexes[2][1] == -1.0);
    CHECK(vertexes[2][2] == -1.0);
    CHECK(vertexes[3][0] == -1.0);
    CHECK(vertexes[3][1] == 1.0);
    CHECK(vertexes[3][2] == -1.0);
    CHECK(vertexes[4][0] == 1.0);
    CHECK(vertexes[4][1] == -1.0);
    CHECK(vertexes[4][2] == 1.0);
    CHECK(vertexes[5][0] == 1.0);
    CHECK(vertexes[5][1] == 01.0);
    CHECK(vertexes[5][2] == 01.0);
    CHECK(vertexes[6][0] == 1.0);
    CHECK(vertexes[6][1] == -1.0);
    CHECK(vertexes[6][2] == -1.0);
    CHECK(vertexes[7][0] == 1.0);
    CHECK(vertexes[7][1] == 1.0);
    CHECK(vertexes[7][2] == -1.0);
    REQUIRE(normals.size() == 6);
    CHECK(normals[0][0] == -1.0);
    CHECK(normals[0][1] == 0.0);
    CHECK(normals[0][2] == 0.0);
    CHECK(normals[1][0] == 0.0);
    CHECK(normals[1][1] == 0.0);
    CHECK(normals[1][2] == -1.0);
    CHECK(normals[2][0] == 1.0);
    CHECK(normals[2][1] == 0.0);
    CHECK(normals[2][2] == 0.0);
    CHECK(normals[3][0] == 0.0);
    CHECK(normals[3][1] == 0.0);
    CHECK(normals[3][2] == 1.0);
    CHECK(normals[4][0] == 0.0);
    CHECK(normals[4][1] == -1.0);
    CHECK(normals[4][2] == 0.0);
    CHECK(normals[5][0] == 0.0);
    CHECK(normals[5][1] == 1.0);
    CHECK(normals[5][2] == 0.0);
    REQUIRE(uvs.size() == 14);
    CHECK(uvs[0][0] == 0.375000);
    CHECK(uvs[0][1] == 0.000000);
    CHECK(uvs[1][0] == 0.625000);
    CHECK(uvs[1][1] == 0.000000);
    CHECK(uvs[2][0] == 0.625000);
    CHECK(uvs[2][1] == 0.250000);
    CHECK(uvs[3][0] == 0.375000);
    CHECK(uvs[3][1] == 0.250000);
    CHECK(uvs[4][0] == 0.625000);
    CHECK(uvs[4][1] == 0.500000);
    CHECK(uvs[5][0] == 0.375000);
    CHECK(uvs[5][1] == 0.500000);
    CHECK(uvs[6][0] == 0.625000);
    CHECK(uvs[6][1] == 0.750000);
    CHECK(uvs[7][0] == 0.375000);
    CHECK(uvs[7][1] == 0.750000);
    CHECK(uvs[8][0] == 0.625000);
    CHECK(uvs[8][1] == 1.000000);
    CHECK(uvs[9][0] == 0.375000);
    CHECK(uvs[9][1] == 1.000000);
    CHECK(uvs[10][0] == 0.125000);
    CHECK(uvs[10][1] == 0.500000);
    CHECK(uvs[11][0] == 0.125000);
    CHECK(uvs[11][1] == 0.750000);
    CHECK(uvs[12][0] == 0.875000);
    CHECK(uvs[12][1] == 0.500000);
    CHECK(uvs[13][0] == 0.875000);
    CHECK(uvs[13][1] == 0.750000);
    REQUIRE(faces.size() == 6);
    REQUIRE(faces[0].size() == 4);
    REQUIRE(faces[1].size() == 4);
    REQUIRE(faces[2].size() == 4);
    REQUIRE(faces[3].size() == 4);
    REQUIRE(faces[4].size() == 4);
    REQUIRE(faces[5].size() == 4);
    CHECK(std::get<0>(faces[0][0]) == 1);
    CHECK(std::get<0>(faces[0][1]) == 2);
    CHECK(std::get<0>(faces[0][2]) == 4);
    CHECK(std::get<0>(faces[0][3]) == 3);
    REQUIRE(std::get<1>(faces[0][0]).has_value());
    REQUIRE(std::get<1>(faces[0][1]).has_value());
    REQUIRE(std::get<1>(faces[0][2]).has_value());
    REQUIRE(std::get<1>(faces[0][3]).has_value());
    CHECK(std::get<1>(faces[0][0]).value() == 1);
    CHECK(std::get<1>(faces[0][1]).value() == 2);
    CHECK(std::get<1>(faces[0][2]).value() == 3);
    CHECK(std::get<1>(faces[0][3]).value() == 4);
    REQUIRE(std::get<2>(faces[0][0]).has_value());
    REQUIRE(std::get<2>(faces[0][1]).has_value());
    REQUIRE(std::get<2>(faces[0][2]).has_value());
    REQUIRE(std::get<1>(faces[0][3]).has_value());
    CHECK(std::get<2>(faces[0][0]).value() == 1);
    CHECK(std::get<2>(faces[0][1]).value() == 1);
    CHECK(std::get<2>(faces[0][2]).value() == 1);
    CHECK(std::get<2>(faces[0][3]).value() == 1);

    CHECK(std::get<0>(faces[1][0]) == 3);
    CHECK(std::get<0>(faces[1][1]) == 4);
    CHECK(std::get<0>(faces[1][2]) == 8);
    CHECK(std::get<0>(faces[1][3]) == 7);
    REQUIRE(std::get<1>(faces[1][0]).has_value());
    REQUIRE(std::get<1>(faces[1][1]).has_value());
    REQUIRE(std::get<1>(faces[1][2]).has_value());
    REQUIRE(std::get<1>(faces[1][3]).has_value());
    CHECK(std::get<1>(faces[1][0]).value() == 4);
    CHECK(std::get<1>(faces[1][1]).value() == 3);
    CHECK(std::get<1>(faces[1][2]).value() == 5);
    CHECK(std::get<1>(faces[1][3]).value() == 6);
    REQUIRE(std::get<2>(faces[1][0]).has_value());
    REQUIRE(std::get<2>(faces[1][1]).has_value());
    REQUIRE(std::get<2>(faces[1][2]).has_value());
    REQUIRE(std::get<1>(faces[1][3]).has_value());
    CHECK(std::get<2>(faces[1][0]).value() == 2);
    CHECK(std::get<2>(faces[1][1]).value() == 2);
    CHECK(std::get<2>(faces[1][2]).value() == 2);
    CHECK(std::get<2>(faces[1][3]).value() == 2);

    CHECK(std::get<0>(faces[2][0]) == 7);
    CHECK(std::get<0>(faces[2][1]) == 8);
    CHECK(std::get<0>(faces[2][2]) == 6);
    CHECK(std::get<0>(faces[2][3]) == 5);
    REQUIRE(std::get<1>(faces[2][0]).has_value());
    REQUIRE(std::get<1>(faces[2][1]).has_value());
    REQUIRE(std::get<1>(faces[2][2]).has_value());
    REQUIRE(std::get<1>(faces[2][3]).has_value());
    CHECK(std::get<1>(faces[2][0]).value() == 6);
    CHECK(std::get<1>(faces[2][1]).value() == 5);
    CHECK(std::get<1>(faces[2][2]).value() == 7);
    CHECK(std::get<1>(faces[2][3]).value() == 8);
    REQUIRE(std::get<2>(faces[2][0]).has_value());
    REQUIRE(std::get<2>(faces[2][1]).has_value());
    REQUIRE(std::get<2>(faces[2][2]).has_value());
    REQUIRE(std::get<1>(faces[2][3]).has_value());
    CHECK(std::get<2>(faces[2][0]).value() == 3);
    CHECK(std::get<2>(faces[2][1]).value() == 3);
    CHECK(std::get<2>(faces[2][2]).value() == 3);
    CHECK(std::get<2>(faces[2][3]).value() == 3);

    CHECK(std::get<0>(faces[3][0]) == 5);
    CHECK(std::get<0>(faces[3][1]) == 6);
    CHECK(std::get<0>(faces[3][2]) == 2);
    CHECK(std::get<0>(faces[3][3]) == 1);
    REQUIRE(std::get<1>(faces[3][0]).has_value());
    REQUIRE(std::get<1>(faces[3][1]).has_value());
    REQUIRE(std::get<1>(faces[3][2]).has_value());
    REQUIRE(std::get<1>(faces[3][3]).has_value());
    CHECK(std::get<1>(faces[3][0]).value() == 8);
    CHECK(std::get<1>(faces[3][1]).value() == 7);
    CHECK(std::get<1>(faces[3][2]).value() == 9);
    CHECK(std::get<1>(faces[3][3]).value() == 10);
    REQUIRE(std::get<2>(faces[3][0]).has_value());
    REQUIRE(std::get<2>(faces[3][1]).has_value());
    REQUIRE(std::get<2>(faces[3][2]).has_value());
    REQUIRE(std::get<1>(faces[3][3]).has_value());
    CHECK(std::get<2>(faces[3][0]).value() == 4);
    CHECK(std::get<2>(faces[3][1]).value() == 4);
    CHECK(std::get<2>(faces[3][2]).value() == 4);
    CHECK(std::get<2>(faces[3][3]).value() == 4);

    CHECK(std::get<0>(faces[4][0]) == 3);
    CHECK(std::get<0>(faces[4][1]) == 7);
    CHECK(std::get<0>(faces[4][2]) == 5);
    CHECK(std::get<0>(faces[4][3]) == 1);
    REQUIRE(std::get<1>(faces[4][0]).has_value());
    REQUIRE(std::get<1>(faces[4][1]).has_value());
    REQUIRE(std::get<1>(faces[4][2]).has_value());
    REQUIRE(std::get<1>(faces[4][3]).has_value());
    CHECK(std::get<1>(faces[4][0]).value() == 11);
    CHECK(std::get<1>(faces[4][1]).value() == 6);
    CHECK(std::get<1>(faces[4][2]).value() == 8);
    CHECK(std::get<1>(faces[4][3]).value() == 12);
    REQUIRE(std::get<2>(faces[4][0]).has_value());
    REQUIRE(std::get<2>(faces[4][1]).has_value());
    REQUIRE(std::get<2>(faces[4][2]).has_value());
    REQUIRE(std::get<1>(faces[4][3]).has_value());
    CHECK(std::get<2>(faces[4][0]).value() == 5);
    CHECK(std::get<2>(faces[4][1]).value() == 5);
    CHECK(std::get<2>(faces[4][2]).value() == 5);
    CHECK(std::get<2>(faces[4][3]).value() == 5);

    CHECK(std::get<0>(faces[5][0]) == 8);
    CHECK(std::get<0>(faces[5][1]) == 4);
    CHECK(std::get<0>(faces[5][2]) == 2);
    CHECK(std::get<0>(faces[5][3]) == 6);
    REQUIRE(std::get<1>(faces[5][0]).has_value());
    REQUIRE(std::get<1>(faces[5][1]).has_value());
    REQUIRE(std::get<1>(faces[5][2]).has_value());
    REQUIRE(std::get<1>(faces[5][3]).has_value());
    CHECK(std::get<1>(faces[5][0]).value() == 5);
    CHECK(std::get<1>(faces[5][1]).value() == 13);
    CHECK(std::get<1>(faces[5][2]).value() == 14);
    CHECK(std::get<1>(faces[5][3]).value() == 7);
    REQUIRE(std::get<2>(faces[5][0]).has_value());
    REQUIRE(std::get<2>(faces[5][1]).has_value());
    REQUIRE(std::get<2>(faces[5][2]).has_value());
    REQUIRE(std::get<1>(faces[5][3]).has_value());
    CHECK(std::get<2>(faces[5][0]).value() == 6);
    CHECK(std::get<2>(faces[5][1]).value() == 6);
    CHECK(std::get<2>(faces[5][2]).value() == 6);
    CHECK(std::get<2>(faces[5][3]).value() == 6);
}

